*********************************************************************
*eor* cthin
*
*********************************************************************
*
* title record
* (first uncommmented line)
*
cth11 0.12Mearth->0.96Mearth b=0.7 v=1vesc com



*
* control input
* (gravity calc, stop time, etc.)
*
control 
  mmp0 * recommended 
  tstop = 3.6e4
  pvoid = 10.0
  nscycle = 999999999 * no limit on number of cycles
  ntbad =  999999999 * allow a lot of EOS thermo calc errors
  rdumpf  = 10800.   * restart dumps based on CPU time -  3 hrs
  selfgravity sam=1 sub=1
endc



*
* AMR Input
* (spacial resolution)
*
amr
 3dr
 debug
 nx = 4
 ny = 4
 nz = 4
 bx = 1
 by = 1
 bz = 1
 gmin =  -2e10, -2e10, -2e10
 gmax =   2e10,  2e10,  2e10
 maxl = 7
 maxb = 8000
 * Print AMR info every 10 cycles
 info = 10

 *
 * indicators
 * (when and where to increase resolution)
 *
 indicator
  activateonly
  val dens
  refabove .1
 endi
 * refine any significant density
 indicator
   val dens
   refabove 2.0
 endi
 indicator
   val dens
   unrbelow 2.0
 endi
 * used to unrefine anything not refined above
 indicator 
  val void * this is always a number between 0 and 1
  unrabove -1
 endi
enda



*
*  equation of state inputs
*
eos ses=1e7
* mantle
  MAT1 SESAME USER EOS=001
    FEOS='/group/stewartgrp/insecurebin/eos-tables/beos/bfor'
* core
  MAT2 SESAME USER EOS=001
    FEOS='/group/stewartgrp/insecurebin/eos-tables/beos/bir1'
endeos

*
* Old EOSs
*
* Mantle
*   MAT1 ANEOS DUNITE SSAVE=1 PSAVE=1 OSAVE=1 ISAVE=1
*   mat1 sesame user eos=003
*     feos='/home/sts/eos-tables/dunite_eos3/bdun6'
*   Mat1 SESAME User eos=003
*      feos='/home/sts/eos-tables/dunite_eos3/bdun6'
* Core
*   MAT2 ANEOS IRON SSAVE=1 PSAVE=1 OSAVE=1 ISAVE=1
*   mat2 sesame user eos=001
*     feos='/home/sts/eos-tables/iron_aneos/biron'
*   Mat2 Sesame Iron eos=2150
*   Mat2 SESAME User eos=001
*      feos='/home/sts/eos-tables/iron_aneos/biron'



*
* Elastic/plastic input
* (material strength models)
*
epdata
  matep=2 eppvm=USER yield=1e10
ende



*
* Edit control
*
edit
  exact
  shortt
    tim = 0.,  dt = 100000.
  ends
  longt
    tim = 0.,  dt = 100000.
  endl 
  restt
    tim = 0., dtfrequency = 100000.0
  endr
  histt
    tim = 0.,   dt=100.
    htracer all
  endhist
ende 



*
* Boundary Conditions
* (controls flux through boundary)
*
boundary
   bhy
       bxb = 1 , bxt = 1
       byb = 1 , byt = 1
       bzb = 1 , bzt = 1
   endh 
endb



*
* Discard 
*
discard
enddiscard



*
* Convection
* ("Momentum and kinetic energy cannot both be conserved during the remap step
*  so several options are now available for the analyst. In all cases, momentum
*  is conserved")
*
convct
  convection = 0    * default
  interface = smyra
endc



*
* xcell
* (direct CTH to add extra variables to each cell's database)
*
xcell
  mat1 = 1
   pvar = MX1
  mat2 = 1
   pvar = MX2
endx



*
* Spymaster script (see Spymaster User's Guide):
*
spy
 PlotTime(0.0, 3e2);
 SaveTime(0.0, 3e2);
 Save("POSITION","VOLM","VOLM+1","VOLM+2","M","DENS","P","PM+1","PM+2","T","TM+1","TM+2","VX","VY","VZ","MX1","MX2","SGX","SGY","SGZ","SGU","IE","ENT1","ENT2","KPA1","KPA2","ZBAR1","ZBAR2","LX","LY","LZ","CVX","CVY","CVZ","X","Y","Z","CS");

 ListVariables();
 
% SaveTracer(ALL);
% HisTime(0, 9e2);
% SaveHis("GLOBAL, POSITION, VX, VY, VZ");

 ImageFormat(1024,768);

 Units("si");

 define COMX()
 {
   variable comx;
   comx = get_center_of_mass_x();
   return,comx;
 }
 define COMY()
 {
   variable comy;
   comy = get_center_of_mass_y();
   return,comy;
 }
 define COMZ()
 {
   variable comz;
   comz = get_center_of_mass_z();
   return,comz;
 }

 UserVariable("COMX", "Center of Mass X-coordinate (m)");
 UserVariable("COMY", "Center of Mass Y-coordinate (m)");
 UserVariable("COMZ", "Center of Mass Z-coordinate (m)");

 define main()
 {
   pprintf(" PLOT: Cycle=%d, Time=%e\n",CYCLE,TIME);

   % NOTE: this is necessary for COMX, COMY, and COMZ to work
   compute_center_of_mass_3d();

   pprintf("COMX = %f\n", COMX);
   pprintf("COMY = %f\n", COMY);
   pprintf("COMZ = %f\n", COMZ);

   % export_user_variable(COMX);
   % export_user_variable(COMY);
   % export_user_variable(COMZ);

   % Prepare to save binary data
   % XLimits(-1e8, 1e8);
   % YLimits(-1e8, 1e8);
   % ZLimits(-1e8, 1e8); 

   DataOutFormat(98);
   DataOut("binDat","VX","VY","VZ","VOLM+1","VOLM+2","M+1","M+2","DENS","P","PM+1","PM+2","T","TM+1","TM+2","MX1","MX2","SGX","SGY","SGZ","SGU","IE","KE","EM+1","EM+2","LX","LY","LZ","CVX","CVY","CVZ","CS");
   
   % 1D PLOTS
   % ========
   Image("Density_1D_equi", WHITE, BLACK);
    % Fix1D(1e-2*COMX-1e7, 1e-2*COMY, 1e-2*COMZ, 1e-2*COMX+1e7, 1e-2*COMY, 1e-2*COMZ);
    Fix1D(-1e7, 0, 0, 1e7, 0, 0);
    VLimits(1e1, 1.5e4);
    Label(sprintf("Density along equator at %.2f hr", TIME/3600.0));
    Plot1D("DENS", ON, OFF, "dens_equi");
   EndImage;

   Image("Pressure_1D_equi", WHITE, BLACK);
    % Fix1D(1e-2*COMX-1e7, 1e-2*COMY, 1e-2*COMZ, 1e-2*COMX+1e7, 1e-2*COMY, 1e-2*COMZ);
    Fix1D(-1e7, 0, 0, 1e7, 0, 0);
    VLimits(1e7, 1e12, LOG_MAP);
    Label(sprintf("P along equator at %.2f hr", TIME/3600.0));
    Plot1D("P", ON, OFF, "P_equi");
   EndImage;

   Image("Temp_1D_equi", WHITE, BLACK);
    % Fix1D(1e-2*COMX-1e7, 1e-2*COMY, 1e-2*COMZ, 1e-2*COMX+1e7, 1e-2*COMY, 1e-2*COMZ);
    Fix1D(-1e7, 0, 0, 1e7, 0, 0);
    VLimits(1e2, 1e5, LOG_MAP);
    Label(sprintf("T along equator at %.2f hr", TIME/3600.0));
    Plot1D("T", ON, OFF, "T_equi");
   EndImage;

   Image("Entropy1_1D_equi", WHITE, BLACK);
    % Fix1D(1e-2*COMX-1e7, 1e-2*COMY, 1e-2*COMZ, 1e-2*COMX+1e7, 1e-2*COMY, 1e-2*COMZ);
    Fix1D(-1e7, 0, 0, 1e7, 0, 0);
    VLimits(1.e3, 1.e4);
    Label(sprintf("S1 along equiator at %.2f hr", TIME/3600.0));
    Plot1D("ENT1", ON, OFF, "S1_equi");
   EndImage;

   Image("Entropy2_1D_equi", WHITE, BLACK);
    % Fix1D(1e-2*COMX-1e7, 1e-2*COMY, 1e-2*COMZ, 1e-2*COMX+1e7, 1e-2*COMY, 1e-2*COMZ);
    Fix1D(-1e7, 0, 0, 1e7, 0, 0);
    VLimits(1.e3,1.e4);
    Label(sprintf("S2 along equiator at %.2f hr", TIME/3600.0));
    Plot1D("ENT2", ON, OFF, "S2_equi");
   EndImage;


   % 2D PLOTS
   % ========
   Image("ent1_xy-plane",WHITE,BLACK);
    Label(sprintf("Entropy at %0.2e secs.", TIME));
    Window(-1, -1, 10, 10);

    XLimits((1e-2)*COMX - 5e7, (1e-2)*COMX + 5e7);
    YLimits((1e-2)*COMY - 5e7, (1e-2)*COMY + 5e7);
    FixZ((1e-2)*COMZ);

    ParulaMap;
    ColorMapRange(1.e3,1.e4);
    ColorMapClipping(ON,ON);
    Label(sprintf("Forsterite Entropy at %.2f hr",TIME/3600.0));
    Plot2D("ENT1");
    DrawColorMap("S1", 0.8, 0.5, 1, 1);
   EndImage;

   Image("ent2_xy-plane",WHITE,BLACK);
    Label(sprintf("Entropy at %.2f hr", TIME/3600.0));
    Window(0, 0, 1, 1);
    
    XLimits((1e-2)*COMX-5e7, (1e-2)*COMX+5e7);
    YLimits((1e-2)*COMY-5e7, (1e-2)*COMY+5e7);
    FixZ((1e-2)*COMZ);
    
    ParulaMap;
    ColorMapRange(1.e3,1.e4);
    ColorMapClipping(ON,ON);
    Label(sprintf("Iron Entropy at %.2f hr", TIME/3600.0));
    Plot2D("ENT2");
    DrawColorMap("S2", 0.8, 0.5, 1, 1);
   EndImage;

   Image("mat1mix_xy-plane",WHITE,BLACK);
    Label(sprintf("Material Mixing at %.2f hr", TIME/3600.0));
    Window(0, 0, 1, 1);
    
    XLimits((1e-2)*COMX-5e7, (1e-2)*COMX+5e7);
    YLimits((1e-2)*COMY-5e7, (1e-2)*COMY+5e7);
    FixZ(0);
    
    ParulaMap;
    ColorMapRange(90,210);
    ColorMapClipping(ON,ON);
    Label(sprintf("Mix mantles at %.2f hr", TIME/3600.0));
    Plot2D("MX1");
    DrawColorMap("Mix", 0.8, 0.5, 1, 1);
   EndImage;

   Image("mat2mix_xy-plane",WHITE,BLACK);
    Label(sprintf("Material Mixing at %.2f hr", TIME/3600.0));
    Window(0, 0, 1, 1);
    
    XLimits((1e-2)*COMX-5e7, (1e-2)*COMX+5e7);
    YLimits((1e-2)*COMY-5e7, (1e-2)*COMY+5e7);
    FixZ((1e-2)*COMZ);

    ParulaMap;
    ColorMapRange(290,410);
    ColorMapClipping(ON,ON);
    Label(sprintf("Mix cores at %.2f hr", TIME/3600.0));
    Plot2D("MX2");
    DrawColorMap("Mix", 0.8, 0.5, 1, 1);
   EndImage;

   Image("Density_xy-plane",WHITE,BLACK);
    Label(sprintf("Density at %.2f hr", TIME/3600.0));
    Window(0, 0, 1, 1);
    
    XLimits((1e-2)*COMX-5e7, (1e-2)*COMX+5e7);
    YLimits((1e-2)*COMY-5e7, (1e-2)*COMY+5e7);
    FixZ((1e-2)*COMZ);
    
    ParulaMap;
    ColorMapRange(1e1, 1.5e4);
    ColorMapClipping(ON, OFF);
    Plot2D("DENS");
    DrawColorMap("Density (kg/m^3)", 0.8, 0.5, 1, 1);
    DrawBlockEdges;
   EndImage;

   Image("Pressure_xy-plane",WHITE,BLACK);
    Label(sprintf("Pressure at %.2f hr", TIME/3600.0));
    Window(0, 0, 1, 1);
    
    XLimits((1e-2)*COMX-5e7, (1e-2)*COMX+5e7);
    YLimits((1e-2)*COMY-5e7, (1e-2)*COMY+5e7);
    FixZ((1e-2)*COMZ);
    
    ParulaMap;
    ColorMapRange(1e7, 1e12, LOG_MAP);
    ColorMapClipping(ON, OFF);
    Plot2D("P");
    DrawColorMap("Pressure (Pa)", 0.8, 0.5, 1, 1);
    DrawBlockEdges;
   EndImage;

   Image("Density_xz-plane",WHITE,BLACK);
    Label(sprintf("Density at %.2f hr", TIME/3600.0));
    Window(0, 0, 1, 1);

    XLimits((1e-2)*COMX-5e7, (1e-2)*COMX+5e7);
    FixY((1e-2)*COMY);
    ZLimits((1e-2)*COMZ-5e7, (1e-2)*COMZ+5e7);

    ParulaMap;
    ColorMapRange(1e1, 1.5e4);
    ColorMapClipping(ON, OFF);
    Plot2D("DENS");
    DrawColorMap("Density (kg/m^3)", 0.8, 0.5, 1, 1);
    DrawBlockEdges;
   EndImage;

   Image("Pressure_xz-plane",WHITE,BLACK);
    Label(sprintf("Pressure at %.2f hr", TIME/3600.0));
    Window(0, 0, 1, 1);
    
    XLimits((1e-2)*COMX-5e7, (1e-2)*COMX+5e7);
    FixY((1e-2)*COMY);
    ZLimits((1e-2)*COMZ-5e7, (1e-2)*COMZ+5e7);

    ParulaMap;
    ColorMapRange(1e7, 1e12, LOG_MAP);
    ColorMapClipping(ON, OFF);
    Plot2D("P");
    DrawColorMap("Pressure (Pa)", 0.8, 0.5, 1, 1);
    DrawBlockEdges;
   EndImage;

   Image("Pressure_surf",WHITE,BLACK);
    Label(sprintf("Pressure at %.2f hr", TIME/3600.0));

    XLimits(-1e8, 1e8);
    YLimits(-1e8, 1e8);
    ZLimits(-1e8, 1e8);
    RotateX(-45);
    RotateZ(180);

    ParulaMap;
    ColorMapRange(1e7,1e12, LOG_MAP);
    Paint3DMat(1,"P", 0.2);
    Paint3DMat(2,"P", 0.2);
    DrawColorMap("Pressure", 0.8, 0.5, 1, 1);
   EndImage;
}
endspy


*
* Diatom
* (initial conditions)
*
diatom
 rgstable 0.e5,0.e5,0.,5350.e5   *center-x, center-y, center-z, radius cm
 package 'planet-1mat'
  mat 1
  temperature=0.1465
  avelocity = 0.,0.,0.5e-4
  insert sphere
    ce =  0,0,0
    r  = 5350.e5
  endi
 endp
 endrgstable
enddiatom



*
* Tracers
* (for post processing)
*
tracers
  add 0.0, 0.0, 0.0
endtracers



**** End of input deck ****
